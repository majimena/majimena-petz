package org.majimena.petz.service.impl;

import mockit.Injectable;
import mockit.NonStrictExpectations;
import mockit.Tested;
import mockit.Verifications;
import org.junit.Test;
import org.junit.experimental.runners.Enclosed;
import org.junit.runner.RunWith;
import org.majimena.petz.common.exceptions.ResourceNotFoundException;
import org.majimena.petz.datatype.TaxType;
import org.majimena.petz.domain.Clinic;
import org.majimena.petz.domain.Product;
import org.majimena.petz.domain.product.ProductCriteria;
import org.majimena.petz.repository.ProductRepository;
import org.majimena.petz.security.ResourceCannotAccessException;
import org.springframework.data.jpa.domain.Specification;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;

/**
 * @see ProductServiceImpl
 */
@RunWith(Enclosed.class)
public class ProductServiceImplTest {

    protected static Product newProduct() {
        return Product.builder()
                .id("product1")
                .clinic(Clinic.builder().id("1").build())
                .name("12345678901234567890123456789012345678901234567890")
                .price(BigDecimal.valueOf(123456789))
                .taxType(TaxType.EXCLUSIVE)
                .tax(BigDecimal.valueOf(123456789))
                .taxRate(BigDecimal.valueOf(0.08))
                .description
                .removed(Boolean.FALSE).build();
    }

    public static class GetProductsByProductCriteriaTest {

        @Tested
        private ProductServiceImpl sut = new ProductServiceImpl();

        @Injectable
        private ProductRepository productRepository;

        @Test
        public void プロダクトの一覧が取得できること() throws Exception {
            ProductCriteria criteria = new ProductCriteria("1", "初診");
            new NonStrictExpectations() {{
                productRepository.findAll((Specification) any);
                result = Arrays.asList(newProduct());
            }};

            List<Product> result = sut.getProductsByProductCriteria(criteria);

            assertThat(result.isEmpty(), is(false));
            assertThat(result.size(), is(1));
            assertThat(result.get(0).getId(), is("product1"));
            assertThat(result.get(0).getName(), is("12345678901234567890123456789012345678901234567890"));
            assertThat(result.get(0).getPrice(), is(BigDecimal.valueOf(123456789)));
            assertThat(result.get(0).getTaxType(), is(TaxType.EXCLUSIVE));
            assertThat(result.get(0).getTaxRate(), is(BigDecimal.valueOf(0.08)));
            assertThat(result.get(0).getTax(), is(BigDecimal.valueOf(123456789)));
            assertThat(result.get(0).getDescription(), is
            assertThat(result.get(0).getRemoved(), is(Boolean.FALSE));
        }

        @Test
        public void プロダクトが存在しない場合は空の一覧が取得できること() throws Exception {
            ProductCriteria criteria = new ProductCriteria("1", "初診");
            new NonStrictExpectations() {{
                productRepository.findAll((Specification) any);
                result = Arrays.asList();
            }};

            List<Product> result = sut.getProductsByProductCriteria(criteria);

            assertThat(result.isEmpty(), is(true));
        }
    }

    public static class GetProductByProductIdTest {

        @Tested
        private ProductServiceImpl sut = new ProductServiceImpl();

        @Injectable
        private ProductRepository productRepository;

        @Test
        public void プロダクトが取得できること() throws Exception {
            new NonStrictExpectations() {{
                productRepository.findOne("product1");
                result = newProduct();
            }};

            Optional<Product> result = sut.getProductByProductId("1", "product1");

            assertThat(result.get().getId(), is("product1"));
            assertThat(result.get().getName(), is("12345678901234567890123456789012345678901234567890"));
            assertThat(result.get().getPrice(), is(BigDecimal.valueOf(123456789)));
            assertThat(result.get().getTaxType(), is(TaxType.EXCLUSIVE));
            assertThat(result.get().getTaxRate(), is(BigDecimal.valueOf(0.08)));
            assertThat(result.get().getTax(), is(BigDecimal.valueOf(123456789)));
            assertThat(result.get().getDescription(), is
            assertThat(result.get().getRemoved(), is(Boolean.FALSE));
        }

        @Test
        public void 結果がない場合は空が取得できること() throws Exception {
            new NonStrictExpectations() {{
                productRepository.findOne("product1");
                result = null;
            }};

            Optional<Product> result = sut.getProductByProductId("1", "product1");
            assertThat(result.isPresent(), is(false));
        }

        @Test(expected = ResourceCannotAccessException.class)
        public void 指定したクリニックと異なる場合は空が取得できること() throws Exception {
            new NonStrictExpectations() {{
                Product data = newProduct();
                data.setClinic(Clinic.builder().id("999").build());
                productRepository.findOne("product1");
                result = data;
            }};

            sut.getProductByProductId("1", "product1");
        }
    }

    public static class SaveProductTest {

        @Tested
        private ProductServiceImpl sut = new ProductServiceImpl();

        @Injectable
        private ProductRepository productRepository;

        @Test
        public void プロダクトが登録できること() throws Exception {
            Product data = newProduct();
            data.setId(null);
            new NonStrictExpectations() {{
                productRepository.save(data);
                data.setId("product1");
                result = data;
            }};

            Product result = sut.saveProduct(data);

            assertThat(result.getId(), is("product1"));
            assertThat(result.getName(), is("12345678901234567890123456789012345678901234567890"));
            assertThat(result.getPrice(), is(BigDecimal.valueOf(123456789)));
            assertThat(result.getTaxType(), is(TaxType.EXCLUSIVE));
            assertThat(result.getTaxRate(), is(BigDecimal.valueOf(0.08)));
            assertThat(result.getTax(), is(BigDecimal.valueOf(123456789)));
            assertThat(result.getDescription(), is
            assertThat(result.getRemoved(), is(Boolean.FALSE));
        }
    }

    public static class UpdateProductTest {

        @Tested
        private ProductServiceImpl sut = new ProductServiceImpl();

        @Injectable
        private ProductRepository productRepository;

        @Test
        public void プロダクトが更新できること() throws Exception {
            Product data = newProduct();
            new NonStrictExpectations() {{
                productRepository.findOne("product1");
                result = data;

                data.setName("0987654321");
                productRepository.save(data);
                result = data;
            }};

            Product result = sut.updateProduct(data);

            assertThat(result.getId(), is("product1"));
            assertThat(result.getName(), is("0987654321"));
            assertThat(result.getPrice(), is(BigDecimal.valueOf(123456789)));
            assertThat(result.getTaxType(), is(TaxType.EXCLUSIVE));
            assertThat(result.getTaxRate(), is(BigDecimal.valueOf(0.08)));
            assertThat(result.getTax(), is(BigDecimal.valueOf(123456789)));
            assertThat(result.getDescription(), is
            assertThat(result.getRemoved(), is(Boolean.FALSE));
        }

        @Test(expected = ResourceNotFoundException.class)
        public void 対象がない場合は削除できないこと() throws Exception {
            new NonStrictExpectations() {{
                productRepository.findOne("product1");
                result = null;
            }};

            sut.updateProduct(newProduct());
        }

        @Test(expected = ResourceCannotAccessException.class)
        public void 指定したクリニックの権限がない場合は削除できないこと() throws Exception {
            Product product = newProduct();
            new NonStrictExpectations() {{
                Product data = newProduct();
                data.setClinic(Clinic.builder().id("999").build());
                productRepository.findOne("product1");
                result = data;
            }};

            sut.updateProduct(product);
        }
    }

    public static class DeleteProductByProductIdTest {

        @Tested
        private ProductServiceImpl sut = new ProductServiceImpl();

        @Injectable
        private ProductRepository productRepository;

        @Test
        public void プロダクトが削除できること() throws Exception {
            Product data = newProduct();
            new NonStrictExpectations() {{
                productRepository.findOne("product1");
                result = data;
                productRepository.delete(data);
                result = null;
            }};

            sut.deleteProductByProductId("1", "product1");
        }

        @Test(expected = ResourceNotFoundException.class)
        public void 対象がない場合は削除できないこと() throws Exception {
            new NonStrictExpectations() {{
                productRepository.findOne("product1");
                result = null;
            }};

            sut.deleteProductByProductId("1", "product1");
        }

        @Test(expected = ResourceCannotAccessException.class)
        public void 指定したクリニックの権限がない場合は削除できないこと() throws Exception {
            Product product = newProduct();
            new NonStrictExpectations() {{
                productRepository.findOne("product1");
                product.setClinic(Clinic.builder().id("999").build());
                result = product;
            }};

            sut.deleteProductByProductId("1", "product1");
        }
    }
}
